LinkedList    --- has many --- Node
LinkedList    ---   uses   --- Iterator
Iterator      ---   has a  --- Node
Queue         ---   is a   --- LinkedList
Stack         ---   is a   --- LinkedList

E : Generic

Node
 + Node()
 + Node(E)
 + delete()
 + data : E
 + next : Node
 + prev : Node

Iterator
 ~ Iterator(Node)
 + hasNext() : Boolean
 + next() : E
 + remove()
 - head : Node
 - node : Node

LinkedList
 + LinkedList()
 + LinkedList(LinkedList)
 + add(E) : Boolean
 + clear()
 + contains(Object) : Boolean
 + isEmpty() : Boolean
 + iterator() : Iterator
 + remove(Object) : Boolean
 + size() : Integer
 + toString() : String
 # head : Node
 # size : Integer

Queue
 + Queue()
 + Queue(LinkedList)
 + dequeue() : E
 + enqueue(E)
 + front() : E

Stack
 + Stack()
 + Stack(LinkedList)
 + pop() : E
 + push(E)
 + top() : E

Key : Generic
Value: Generic

 Pair
 + key : Key
 + value : Value

HashMap
 - hash : Function
 - table : List of LinkedList of Pair
 + add(Key, Value)
 + get(Key) : Value
 + reset()

TestRunner
 - log : List of String
 - stream : PrintStream
 - passCount : Integer
 - failCount : Integer
 - verbose : Boolean
 + expect(Boolean, String)
 + pass(String)
 + fail(String)
 + assertEqual(Object, Object, String)
 + log(String)
 + done()

Token
 - value : Double
 - name : String
 + name() : String
 + value() : Double
 + isOperator() : Boolean
 + isUnaryOperator : Boolean
 + isBinaryOperator() : Boolean
 + isVariable() : Boolean
 + toString() : String
 + equals(Object) : Boolean

BinaryOperator
 + call(Token, Token) : Double

UnaryOperator
 + call(Token) : Double

Interpreter
 - symbols : HashMap of Key = String, Value = Double
 + interpret(String) : Double

Main
 <<static>> - test : TestRunner
 <<static>> - interpreter : Interpreter
 + test(String, Double)
 + shouldThrow(String, Exception)
