
Interpreter::interpret(expression : String) : Double {
    define expr : LinkedList of String

    # tokenize expression
        define tokenList : LinkedList of String
        split expression using "+", "-", "*", "/", "=", "(", ")", (space),
                (newline), (tab), (carriage return) or (line feed) as delimiters
        store the strings in tokenList

        # remove whitespace tokens from tokenList
            tokenList.removeAll(" ")
            tokenList.removeAll((tab))
            tokenList.removeAll((newline))
            tokenList.removeAll((carriage return))
            tokenList.removeAll((line feed))

        # convert expressions of the form "a - b" into "a + (-b)""
            define previous : String
            previous = "a"
            iterate over tokenList on token {
                if token == "-" and not token.matches([\+\*/=]|\(|-|sin|cos|tan|cot|sec|csc|abs|sqrt)) {
                    expr.add("+")
                    previous = token
                }
            }

    # create postfix expression
        define opStack : Stack of String
        define postfix : Queue of Token
        iterate over expr on token {
            # unary operators are always pushed to opStack (highest priority)
            if token.matches(-|sin|cos|tan|cot|sec|csc|abs|sqrt) {
                opStack.push(token)
             }
            # variables are always pushed to postfix
            else if token.matches(([a-z]|[A-Z]|_)\w*) {
                postfix.enqueue(new Token(token))
            }
            # numeric literals are always pushed to postfix
            else if token.matches(\d+) {
                postfix.enqueue(new Token(token as Double))
            }
            # binary operators
            else if token == "=" {
                # only valid if it's the first operator found.
                # otherwise it's an error (there cannot be operators
                # on the left hand side of an assignment)
                if opStack.isEmpty() {
                    opStack.push("=")
                } else {
                    throw SyntaxError
                }
            }
            else if token is "+" {
                while opStack.isEmpty() {
                    if opStack.top().matches(-|\+|\*|/) {
                        postfix.enqueue(new Token(opStack.pop()))
                    } else {
                        break loop
                    }
                }
                opStack.push(token)
            }
            else if token is "*" or "/" {
                
            }
        }
}
